# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V2JaehYub-fylbiNxJieM1rihk-fVAvR
"""

# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.cluster import KMeans, AgglomerativeClustering
from sklearn.mixture import GaussianMixture
from sklearn.preprocessing import StandardScaler, normalize
from sklearn.decomposition import PCA
from sklearn.metrics import silhouette_score, calinski_harabasz_score, davies_bouldin_score
from sklearn.datasets import load_iris

# Load Iris dataset
iris = load_iris()
X = iris.data

# Define clustering algorithms
kmeans = KMeans(random_state=42)
hierarchical = AgglomerativeClustering()
# Specify the number of components (clusters) for GMM
gmm = GaussianMixture(n_components=3, random_state=42)  # You can adjust the number of components as needed

# Define preprocessing approaches
preprocessing = {
    'No Preprocessing': lambda x: x,
    'Normalize': normalize,
    'Transform': lambda x: x,  # Replace with your own transformation function
    'PCA': lambda x: PCA(n_components=2).fit_transform(x),
    'T+N': lambda x: normalize(x),
    'T+N+PCA': lambda x: PCA(n_components=2).fit_transform(normalize(x))
}

# Create DataFrames to store the results for each algorithm
index = ['Silhouette', 'Calinski-Harabasz', 'Davies-Bouldin']
columns = pd.MultiIndex.from_product([['No Preprocessing', 'Normalize', 'Transform', 'PCA', 'T+N', 'T+N+PCA'], ['c=3', 'c=4', 'c=5']], names=['Preprocessing', 'Clusters'])
kmeans_df = pd.DataFrame(index=index, columns=columns)
hierarchical_df = pd.DataFrame(index=index, columns=columns)
gaussian_df = pd.DataFrame(index=index, columns=columns)

# Perform clustering for each combination of preprocessing and clusters
for preprocess_column, preprocess_func in preprocessing.items():
    for c in columns.get_level_values('Clusters').unique():
        X_preprocessed = preprocess_func(X)

        # Fit the clustering algorithms
        kmeans.fit(X_preprocessed)
        hierarchical.fit(X_preprocessed)
        gmm.fit(X_preprocessed)

        # Evaluate clustering quality
        kmeans_scores = [silhouette_score(X_preprocessed, kmeans.labels_),
                         calinski_harabasz_score(X_preprocessed, kmeans.labels_),
                         davies_bouldin_score(X_preprocessed, kmeans.labels_)]
        hierarchical_scores = [silhouette_score(X_preprocessed, hierarchical.labels_),
                               calinski_harabasz_score(X_preprocessed, hierarchical.labels_),
                               davies_bouldin_score(X_preprocessed, hierarchical.labels_)]
        gmm_scores = [silhouette_score(X_preprocessed, gmm.predict(X_preprocessed)),
                      calinski_harabasz_score(X_preprocessed, gmm.predict(X_preprocessed)),
                      davies_bouldin_score(X_preprocessed, gmm.predict(X_preprocessed))]

        # Update the results DataFrames
        kmeans_df.loc[:, (preprocess_column, c)] = kmeans_scores
        hierarchical_df.loc[:, (preprocess_column, c)] = hierarchical_scores
        gaussian_df.loc[:, (preprocess_column, c)] = gmm_scores

# Save each DataFrame to a separate CSV file with technique name on top
kmeans_df.to_csv('kmeans_results_iris.csv', index=True)
hierarchical_df.to_csv('hierarchical_results_iris.csv', index=True)
gaussian_df.to_csv('gaussian_results_iris.csv', index=True)

# Concatenate the CSV files with some space and technique names in between
output_file = 'compared_results_iris.csv'
with open(output_file, 'w') as outfile:
    # Write K-Means technique name
    outfile.write('K-Means\n')
    with open('kmeans_results_iris.csv', 'r') as infile:
        outfile.write(infile.read())
    outfile.write('\n\n')  # Add space between DataFrames

    # Write Hierarchical technique name
    outfile.write('Hierarchical\n')
    with open('hierarchical_results_iris.csv', 'r') as infile:
        outfile.write(infile.read())
    outfile.write('\n\n')  # Add space between DataFrames

    # Write Gaussian technique name
    outfile.write('Gaussian\n')
    with open('gaussian_results_iris.csv', 'r') as infile:
        outfile.write(infile.read())

print(f'Combined results with technique names saved to {output_file}')